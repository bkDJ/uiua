# Basic pervasive math
⍤⟜≍: [2 3 4] +1 [1 2 3]
⍤⟜≍: [5 7 9] +[1 2 3][4 5 6]
⍤⟜≍: [5 6 7] +[1 2 3] 4
⍤⟜≍: [2_3_4 6_7_8 10_11_12] + [1 2 3] [1_2_3 4_5_6 7_8_9]
⍤⟜≍: [2_3_4 6_7_8 10_11_12] + [1_2_3 4_5_6 7_8_9] [1 2 3]
⍤⟜≍: [0_1_2 2_3_4 4_5_6] - [1 2 3] [1_2_3 4_5_6 7_8_9]
⍤⟜≍: ¯[0_1_2 2_3_4 4_5_6] - [1_2_3 4_5_6 7_8_9] [1 2 3]
⍤⟜≍: ↯2_0 0 ×1_2 ↯2_0 0

# Fixed pervasive math
+ ¤100_200 [[1_2 3_4] [5_6 7_8] [9_10 11_12]]
⍤⟜≍: [[101_102 203_204] [105_106 207_208] [109_110 211_212]]
+ ¤¤100_200 [[1_2 3_4] [5_6 7_8] [9_10 11_12]]
⍤⟜≍: [[101_202 103_204] [105_206 107_208] [109_210 111_212]]
⍤⟜≍: [11_12_13 24_25_26] + 10_20 [1_2_3 4_5_6]
⍤⟜≍: [11_22_33 14_25_36] + ¤10_20_30 [1_2_3 4_5_6]
⍤⟜≍: [3_2_1 4_3_2 5_4_3] - ¤[1 2 3] [4 5 6]
⍤⟜≍: 0_3 △ +¤ ↯3 0 ↯0_3 0
⍤⟜≍: 1_3 △ +¤ ↯3 0 ↯1_3 0
⍤⟜≍: ⇡10 + ¤¤0 ⇡10

# Filled pervasive math
⍤⟜≍: [1_1 0_0] ⬚0↥ ↯ 2_2 0 ↯ 1_2 1
⍤⟜≍: [1_0 1_0] ⬚0↥ ↯ 2_2 0 ↯ 2_1 1

# Trig
⍤⟜≍: η °○ 1
⍤⟜≍: ℂ0η °○ ℂ0 1
⍤⟜≍: η +η°○ 0
⍤⟜≍: ℂ0η +η°○ ℂ0 0
⍤⟜≍: η ∠ 1 0
⍤⟜≍: ℂ0η ∠ 1 ℂ0 0
⍤⟜≍: ℂ0η ∠ ℂ0 1 0
⍤⟜≍: ℂ0η ∠ ℂ0 1 ℂ0 0

# Bytes integrity - ensure the the boolean flag is properly set and unset
⍤⟜≍: ¯4 ¬5
⍤⟜≍: 1 ¬0
⍤⟜≍: 0 ¬1
⍤⟜≍: 0.5 ¬0.5
⍤⟜≍: [1 0 ¯1 ¯2] ¬[0 1 2 3]
⍤⟜≍: [1 0 0 1] ¬[0 1 1 0]
⍤⟜≍: [0 0 1] ¬∊ [2 4 5] [1 2 3 4]
⍤⟜≍: [1 0 1 0] ¬∊ [1 2 3 4] [2 4]
⍤⟜≍: [¯1 1 ¯1] ¬+. [1 0 1]
⍤⟜≍: [0 1 0] ¬⊂ 1 [0 1]
⍤⟜≍: [¯4 1 0] ¬⊂ 5 [0 1]
⍤⟜≍: [0 1] ¬⍜⊢(+1) [0 0]
⍤⟜≍: [1 0] ¬⍜(⊢⇌|+1) [0 0]
⍤⟜≍: [0 1] ¬⍜(⊡0|+1) [0 0]
⍤⟜≍: [1 0] ¬⍜(⊡1|+1) [0 0]
⍤⟜≍: [0 1] ¬⍜(⊏0|+1) [0 0]
⍤⟜≍: [1 0] ¬⍜(⊏1|+1) [0 0]
⍤⟜≍: [0 0] ¬⍜(⊏0_1|+1) [0 0]
⍤⟜≍: [0 1] ¬⍜(▽1_0|+1) [0 0]

# Range
⍤⟜≍: [0 1 2 3 4 5] ⇡6
⍤⟜≍: [¯1 ¯2 ¯3 ¯4 ¯5 ¯6] ⇡¯6
⍤⟜≍: [[0_0 0_1 0_2] [1_0 1_1 1_2] [2_0 2_1 2_2]] ⇡3_3
⍤⟜≍: [[0_0 0_1 0_2] [1_0 1_1 1_2]] ⇡2_3
⍤⟜≍: [[¯1_0 ¯1_1 ¯1_2] [¯2_0 ¯2_1 ¯2_2]] ⇡¯2_3

# Deshape
⍤⟜≍: [5] ♭5
⍤⟜≍: [5] ♭[5]
⍤⟜≍: [5] ♭[[5]]
⍤⟜≍: [1 2 3] ♭ [1 2 3]
⍤⟜≍: [1 2 3 4] ♭ [1_2 3_4]

# Reverse
⍤⟜≍: 5 ⇌5
⍤⟜≍: [3 2 1] ⇌[1 2 3]
⍤⟜≍: [5_6 3_4 1_2] ⇌[1_2 3_4 5_6]

# Transpose
⍤⟜≍: 5 ⍉5
⍤⟜≍: [1 2 3] ⍉[1 2 3]
⍤⟜≍: [1_4 2_5 3_6] ⍉[1_2_3 4_5_6]
⍤⟜≍: ⍉⍉.↯3_4⇡12
⍤⟜≍: °⍉⍉.↯3_4⇡12
⍤⟜≍: [[0_1 0_0] [0_1 1_1] [0_1 2_2]] ⍉⇡2_3
⍤⟜≍: [[0_0_0 1_1_1] [0_1_2 0_1_2]] ⍉⍉⇡2_3
⍤⟜≍: [[0_0_0 1_1_1] [0_1_2 0_1_2]] °⍉⇡2_3
⍤⟜≍: ⊃(⍉⍉)°⍉ ↯2_3_4⇡24
⍤⟜≍: ⊃°(⍉⍉)⍉ ↯2_3_4⇡24
⍤⟜≍: ⊃(⍉⍉)°(⍉⍉) ↯2_3_4_5⇡120
⍤⟜≍: ⊃°(⍉⍉)(⍉⍉) ↯2_3_4_5⇡120
⍤⟜≍: ⊃⍉°(⍉⍉⍉) ↯2_3_4_5⇡120
⍤⟜≍: ⊃°⍉(⍉⍉⍉) ↯2_3_4_5⇡120
⍤⟜≍: ⍉⍉⍉⍉ . ↯2_3_4_5⇡120

# Reshape
⍤⟜≍: [5 5 5 5 5] ↯5 5
⍤⟜≍: [0_1_2 3_4_5 6_7_8] ↯3_3⇡9
⍤⟜≍: [0_1_2_3 4_5_0_1 2_3_4_5] ↯3_4⇡6

# Rotate
⍤⟜≍: [3_4_5 6_7_8 0_1_2] ↻1↯3_3⇡10
⍤⟜≍: [2 3 0] ⬚0 ↻1 [1 2 3]
⍤⟜≍: [3 4 5 0 0] ⬚0↻ 2 [1 2 3 4 5]
⍤⟜≍: [0 0 1 2 3] ⬚0↻ ¯2 [1 2 3 4 5]
⍤⟜≍: [2 3 1] ⬚0⬚[] ↻1 [1 2 3]

# Dip
⍤⟜≍: [1 5] [⊙+ 1 2 3]
⍤⟜≍: [1 2 7] [⊙⊙+ 1 2 3 4]
⍤⟜≍: [⊙(+⊙(-⊙×)) 1 2 3 4 5] [⊙(+|-|×) 1 2 3 4 5]

# Fork
⍤⟜≍: [8 2] [⊃+- 3 5]
⍤⟜≍: [13 3 40 1.6] [⊃⊃⊃+-×÷ 5 8]
⍤⟜≍: [8 ¯3] [⊃+¯ 3 5]
⍤⟜≍: [¯3 8] [⊃¯+ 3 5]
⍤⟜≍: [8 2 15 4] [⊃(+|-|×|+1) 3 5]
⍤⟜≍: [8 2 15 4] [⊃⊃⊃+-×(+1) 3 5]

# Empty array types
⍤⟜≍: 0 type[]
⍤⟜≍: 2 type""
⍤⟜≍: 3 type{}

# Two sum
⍤⟜≍: [0 1] ⊚/↥=⊞+. [2 7 11 15] 9

# Planet notation
⍤⟜≍: 25 ×⊃(+⊙⋅⋅∘)(-⊃⋅⋅∘(×⋅⊙⋅∘)) 1 2 3 4
⍤⟜≍: 25 ×⊃(+⊙⋅⋅∘)⋅(-⊃⋅∘(×⊙⋅∘)) 1 2 3 4

# Array construction
⍤⟜≍: [1] [∘] 1
⍤⟜≍: [[1]] [[∘]] 1
⍤⟜≍: [[3]] [[+]] 1 2
⍤⟜≍: [1 1] [.] 1
⍤⟜≍: [2 1] [:] 1 2
⍤⟜≍: [2 1 2] [,] 1 2
⍤⟜≍: [1 2 2] [⊙.] 1 2
⍤⟜≍: [¯1 ¯2] [∩¯] 1 2
⍤⟜≍: [1_0_0 2_3_0 4_5_6] ⬚0[1 2_3 4_5_6]

# Parse
ParseOrZero ← ⍣⋕⋅⋅0
⍤⟜≍: 5 ParseOrZero "5"
⍤⟜≍: 0 ParseOrZero "dog"
⍤⟜≍: ∵⍜°⋕∘. [0 ¯1 η π τ ∞ ¯π NaN]
⍤⟜≍: [12 34 56] ⋕ ["12""34""56"]
⍤⟜≍: [1 23 456] ⋕ {"1""23""456"}
⍤⟜≍: "5" °⋕5
⍤⟜≍: {"1""2""3"} °⋕[1 2 3]

# Switch functions
⍤⟜≍: [¯1 2 ¯3 4 ¯5] 〈¯|∘〉 =0◿2.[1 2 3 4 5]
⍤⟜≍: [6 2 8 4 10] 〈⋅∘|∘〉 [0 1 0 1 0] [1 2 3 4 5] [6 7 8 9 10]
⍤⟜≍: [5 4 ¯1 8 ¯4] 〈-|+〉 =,, [1 2 3 4 5] [6 2 2 4 1]
⍤⟜≍: [¯1 2 ¯3 4 ¯5] 〈¯|∘〉 =0◿2.[1 2 3 4 5]
⍤⟜≍: [6 2 8 4 10] 〈⋅∘|∘〉 [0 1 0 1 0] [1 2 3 4 5] [6 7 8 9 10]
⍤⟜≍: [5 4 ¯1 8 ¯4] 〈-|+〉 =,, [1 2 3 4 5] [6 2 2 4 1]
⍤⟜≍: [81 1 57 1] 〈⊙◌|1〉[0 1 0 1] [81 ¯1 57 ¯1] [79 14 55 13]
⍤⟜≍: [81 14 57 13] 〈⊙◌|◌〉[0 1 0 1] [81 ¯1 57 ¯1] [79 14 55 13]

# Where
⍤⟜≍: [0 3 5 6] ⊚[1 0 0 1 0 1 1 0]
⍤⟜≍: [1 2 2 3 3 3 4 4 4 4] ⊚[0 1 2 3 4]
⍤⟜≍: [1 0 0 1 0 1 1] °⊚[0 3 5 6]
⍤⟜≍: [1 0 0 1 0 1 1] °⊚[6 0 3 5]
⍤⟜≍: [0 1 2 3 4] °⊚[1 2 2 3 3 3 4 4 4 4]
# Multi-dimensional where
⍤⟜≍: [0_2 1_1 1_2 1_2] ⊚[0_0_1 0_1_2 0_0_0]
⍤⟜≍: [0_0_0_0 0_2_0_0 0_0_0_1] °⊚[2_3 1_1 1_1]

# Take and drop
⍤⟜≍: [1] ↙1 [1 2 3 4]
⍤⟜≍: [1 2] ↙2 [1 2 3 4]
⍤⟜≍: [0_1_2] ↙1 ↯3_3⇡9
⍤⟜≍: [2 3 4] ↘1 [1 2 3 4]
⍤⟜≍: [3 4] ↘2 [1 2 3 4]
⍤⟜≍: [3_4_5 6_7_8] ↘1 ↯3_3⇡9

# Escape sequences
⍤⟜≍: 0 -@\0 @\0
⍤⟜≍: 9 -@\0 @\t
⍤⟜≍: 10 -@\0 @\n
⍤⟜≍: 13 -@\0 @\r
⍤⟜≍: 34 -@\0 @"
⍤⟜≍: 39 -@\0 @\'
⍤⟜≍: 65 -@\0 @A
⍤⟜≍: 92 -@\0 @\\
⍤⟜≍: 97 -@\0 @a
⍤⟜≍: 27 -@\0 @\x1b
⍤⟜≍: 4096 -@\0 @\u1000
⍤⟜≍: 1 -@\0 @\u{1}
⍤⟜≍: 16 -@\0 @\u{10}
⍤⟜≍: 256 -@\0 @\u{100}
⍤⟜≍: 4096 -@\0 @\u{1000}
⍤⟜≍: 65536 -@\0 @\u{10000}
⍤⟜≍: 1048576 -@\0 @\u{100000}

# Regex
⍤⟜≍: [{"hello"} {"world"}] regex "[a-z]+" "hello world"
⍤⟜≍: ↯0_1 {} regex "[0-9]+" "hello world"
⍤⟜≍: 1 ⍣(regex "([a-z]" "hello world")⋅1

# Index of
⍤⟜≍: 1 ⊗ 5 [1 5 5]
⍤⟜≍: [1] ⊗ [5] [1 5 5]

# Classify
⍤⟜≍: [0 1 2 3 4] ⊛ [2 9 4 8 3]
⍤⟜≍: [0 1 2 3 4] ⊛ ↯5_2⇡10
⍤⟜≍: [0 1 0 1 0] ⊛ ↯5_2⇡4

# Deduplicate
⍤⟜≍: [1 2 3 4 5] ◴ [1 2 3 4 5]
⍤⟜≍: [1 2 3 4 5] ◴ [1 2 3 4 5 5 5 5 5 5]
⍤⟜≍: [4 8 2 9 1 3] ◴ [4 8 2 9 1 8 3 9 4 9 2 8]
⍤⟜≍: [1_2 3_4 5_6] ◴ [1_2 3_4 5_6 3_4]

# Bits
⍤⟜≍: ⍜⋯∘ .5
⍤⟜≍: ⍜⋯∘ .15
⍤⟜≍: ⍜⋯∘ .[1 2 3]
⍤⟜≍: ⍜⋯∘ .[1_2_3 4_5_6]
⍤⟜≍: ⍜°⋯∘ .[1 0 1]
⍤⟜≍: ⍜°⋯∘ .[1 1 1 1]
⍤⟜≍: ⍜°⋯∘ .[0_1 1_0]
⍤⟜≍: ⍜⋯∘ .0
⍤⟜≍: ⍜⋯∘ .[0]
⍤⟜≍: ⍜⋯∘ .[0 0 0]
⍤⟜≍: ⍜⋯∘ .[[]]
⍤⟜≍: ⍜⋯∘ .[[0]]
⍤⟜≍: ⍜°⋯∘ .[]
⍤⟜≍: ⍜°⋯∘ .[[]]

# Find
⍤⟜≍: [0 1 0 0] ⌕ 2 [1 2 3 4]
⍤⟜≍: [0 1 0 0 1 0 0 0] ⌕ 1_2 [0 1 2 3 1 2 3 4]
⍤⟜≍: [0_1_0_0 1_0_0_0 0_0_1_0 0_0_0_0] ⌕ [1_2 2_0] ↯4_4⇡3
⍤⟜≍: [0 0 0] ⌕ "abcdef" "abc"
⍤⟜≍: [0 0 0 0 0] ⌕ "abcdefgh" "wowee"
⍤⟜≍: [] ⌕ 0 []
⍤⟜≍: ↯0_2e ⌕ 0 ↯0_2e
⍤⟜≍: ↯2_0e ⌕ 0 ↯2_0e

# Rerank
⍤⟜≍: [120] △ ☇0 ↯2_3_4_5⇡120
⍤⟜≍: [24 5] △ ☇1 ↯2_3_4_5⇡120
⍤⟜≍: [6 4 5] △ ☇2 ↯2_3_4_5⇡120
⍤⟜≍: [2 3 4 5] △ ☇3 ↯2_3_4_5⇡120
⍤⟜≍: [1 2 3 4 5] △ ☇4 ↯2_3_4_5⇡120
⍤⟜≍: [1 1 2 3 4 5] △ ☇5 ↯2_3_4_5⇡120
⍤⟜≍: [2 3 4 5] △ ☇¯1 ↯2_3_4_5⇡120
⍤⟜≍: [6 4 5] △ ☇¯2 ↯2_3_4_5⇡120
⍤⟜≍: [24 5] △ ☇¯3 ↯2_3_4_5⇡120
⍤⟜≍: [120] △ ☇¯4 ↯2_3_4_5⇡120

# Under rerank
⍤⟜≍: ⟜⍜(☇0)∘ ↯2_3_4⇡24
⍤⟜≍: ⟜⍜(☇1)∘ ↯2_3_4⇡24
⍤⟜≍: ⟜⍜(☇2)∘ ↯2_3_4⇡24
⍤⟜≍: ⟜⍜(☇3)∘ ↯2_3_4⇡24
⍤⟜≍: ⟜⍜(☇4)∘ ↯2_3_4⇡24
⍤⟜≍: ⟜⍜(☇¯1)∘ ↯2_3_4⇡24
⍤⟜≍: ⟜⍜(☇¯2)∘ ↯2_3_4⇡24
⍤⟜≍: ⟜⍜(☇¯3)∘ ↯2_3_4⇡24
⍤⟜≍: □↯2_3_4⇡24 ⍜(☇3)□ ↯2_3_4⇡24
⍤⟜≍: □↯2_∞_4⇡24 ⍜(☇1)□ ↯2_3_4⇡24
⍤⟜≍: ↯2_3≡□↯∞_4⇡24 ⍜(☇1)≡□ ↯2_3_4⇡24
⍤⟜≍: ≡□↯2_3_4⇡24 ⍜(☇2)≡□ ↯2_3_4⇡24

# Join
⍤⟜≍: [3 5] ⊂ 3 5
⍤⟜≍: [1 2 3 4] ⊂ 1 2_3_4
⍤⟜≍: [1 2 3 4] ⊂ 1_2_3 4
⍤⟜≍: [0_0_0 0_1_2 3_4_5] ⊂ 0_0_0 ↯2_3⇡6
⍤⟜≍: [0_1_2 3_4_5 0_0_0] ⊂:0_0_0 ↯2_3⇡6

# Couple
⍤⟜≍: [1_0 2_3] ⬚0⊟ 1 [2 3]

# Proxy values
F ← +@A ⊟.
⍤⟜≍: ⊂:2_2 ⟜(⊂⊃△type≡F⇡)2
⍤⟜≍: ⊂:2_2 ⟜(⊂⊃△type≡F⇡)1
⍤⟜≍: ⊂:2_2 ⟜(⊂⊃△type≡F⇡)0

# Various bindings
X ← |0 5
⍤⟜≍: 5 X
6
X ← |0 
⍤⟜≍: 6 X
X ← |0.3 1 2 3
⍤⟜≍: [1 2 3] [X]
1 2 3
X ← |0 
⍤⟜≍: [1] [X]
◌◌
⍤⟜≍: [1 10] X_10
G ↚ +1
F ← G

# Constant vs Noadic function
F ← ⚂
G ← (⚂)
⍤⟜≍: 1 ⧻◴ [F F F]
⍤⟜≍: 3 ⧻◴ [G G G]

# Unique
⍤⟜≍: 1 1

# Macros
F! ← ^!5
G! ← F!^!
⍤⟜≍: ¯5 G!¯
Four! ← ∩∩^!
⍤⟜≍: [4 6 8 10] [Four!(×2) 2 3 4 5]
Dyad‼ ← ^!^!
⍤⟜≍: 12 Dyad‼(×2|+1) 5
F‼‼ ← ^!^!^:^!^!^.^!^!^,
⍤⟜≍: [2 1 3 3 4 3] F‼‼(⊂1|⊂2|⊂3|⊂4) []

# Imports
Ex ~ "example.ua"
  Foo ← Ex~Foo
  Incr ← Ex~Increment
  Dub ← Ex~Double
⍤⟜≍: 12 Dub Incr Foo
~ "example" ~ Square
⍤⟜≍: 25 Square 5
⍤⟜≍: 15 Ex~Mac!+
~ "example.ua" ~ Increment
~ "example.ua" ~ Increment
~ "example.ua" ~ Increment
⍤⟜≍: 7 Increment Increment 5

# Euler's identity
⍤⟜≍: 0 ⍜(×1e12)⁅ ⌵+1 ⁿ×iπ e

# Format strings
⍤⟜≍: "5" $"_" 5
⍤⟜≍: "1, 2, 3" $"_, _, _" 1 2 3
⍤⟜≍: "1 + 2 = 3" $"_ + _ = _" ⊃⊙∘+ 1 2
⍤⟜≍: ["foo5" "bar5"] ⊟⊃$"foo_"$"bar_" 5
"foo" "bar"
$ Multi _
$ _ line
⍤⟜≍: "Multi foo\nbar line"

[1 ¯5 +0.1 0.2 π ∞ NaN]
⍤⟜≍: :≡(⋕°⋕)..
⍤⟜≍: :≡(⋕$"_").

# Complex
⍤⟜≍: i ℂ1 0
⍤⟜≍: ℂ0 4 ◿ 5 ℂ0 ¯1

# Memo
F ← memo(+⌊×10⚂)
⍤⟜≍: F1 F1
⍤⟜≍: F5 F5

# Comptime
X ← 5
Y ← comptime(X)
⍤⟜≍: X Y
Z ← comptime(+1Y)
⍤⟜≍: Z +1 X

# Recursion
Fact ← |1 〈×Fact-1.|1〉<2.
⍤⟜≍: 120 Fact 5

# Experimental!

# On
⍤⟜≍: [1 1 3] [⟜⊙⋅⊙◌ 1 2 3 4]
⍤⟜≍: [1 1 2 2 4] [⟜⊙⟜⊙⋅∘ 1 2 3 4]

# Maps
{1 3 "hi" [1 2 3]}
{2 4 "there" [4 5 6]}
map:
MapA ←
MapB ← insert 5 6 MapA
MapsI ← MapA MapB

∩(⍤. has 1) MapsI
∩(⍤. has 3) MapsI
∩(⍤. has "hi") MapsI
∩(⍤. has [1 2 3]) MapsI

∩(⍤⟜≍: □2 get 1) MapsI
∩(⍤⟜≍: □4 get 3) MapsI
∩(⍤⟜≍: □"there" get "hi") MapsI
∩(⍤⟜≍: □[4 5 6] get [1 2 3]) MapsI

MapsII ← ∩(remove 1) MapsI
∩(⍤. ¬has 1) MapsII
∩(⍤. has 3) MapsII
∩(⍤. has "hi") MapsII
∩(⍤. has [1 2 3]) MapsII

⍤⟜≍: 5 get 1_2 map [1_2 3_4] 5_6
⍤⟜≍: 6 get 3_4 map [1_2 3_4] 5_6

⍤⟜≍: [2 3 4 1] ≡(get)[2 3 4 5]¤ ∧(insert) [5 2 3 4] [1 2 3 4] {}

# Repr
repr[{[[1 2][2 3]][3 4]}{[[1 2][2 3]]□{[[1 2][2 3]]□□[3 4]}}]
"[{[[1 2]\n   [2 3]]\n  [3 4]}\n {[[1 2]\n   [2 3]]\n  □{[[1 2]\n     [2 3]]\n    □□[3 4]}}]"
⍤⟜≍:
⍤⟜≍: {"\"test\"" "ℂ1.5 ¯0.0004" "□\"box\""} ≡⍜°□repr {"test" ℂ3/2 ¯4e¯4 □"box"}
≡⍜°□repr{@⊗ @  @\0 @' @\\ @\u{1f600} @\x13 @\u{99999} "你好"}
⍤⟜≍: {"@⊗" "@\\s" "@\\0" "@'" "@\\\\" "@😀" "@\\u{13}" "@\\u{99999}" "\"你好\""}
⍤⟜≍: "\"n\\n\\\\n \\t \\\" ' \"" repr "n\n\\n \t \" ' "
